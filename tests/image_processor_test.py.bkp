import asyncio
import base64
import concurrent.futures
import logging
import time
from base64 import b64decode
from base64 import b64encode
from dataclasses import dataclass, field
from pathlib import Path

import cv2
import numpy as np
from ultralytics import YOLO


@dataclass
class Image:
    image_data: str  # Base64 encoded image data
    faces_detected: bool = False
    image_name: str = field(default=None)
    logger: logging.Logger = field(init=False)

    def __post_init__(self):
        self.logger = logging.getLogger(__name__)
        self.image_name = str(time.strftime('%Y%m%d-%H%M%S'))

    async def save_to_disk(self) -> None:
        try:
            file_path = Path("media/images") / f"{self.image_name}.jpg"
            img_bytes = b64decode(self.image_data)

            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, lambda: file_path.write_bytes(img_bytes))

            self.logger.info(f"Image saved to {file_path}")
        except Exception as e:
            self.logger.error(f"Error saving image: {e}")


class ImageProcessor:
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    async def process_image(self, image_data: str) -> Image:
        with concurrent.futures.ProcessPoolExecutor() as pool:  # Use ProcessPoolExecutor
            processed_image = await asyncio.get_running_loop().run_in_executor(pool, self._process_image_sync, image_data)
        return processed_image

    def _process_image_sync(self, image_data: str) -> Image:
        model = YOLO("yolov8n-face.pt")

        # Decode the base64 image data
        image_bytes = b64decode(image_data)
        image_array = np.frombuffer(image_bytes, dtype=np.uint8)  # Convert to NumPy array
        image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)  # Decode image

        if image is None:
            self.logger.error("Failed to decode image from base64 data.")
            raise ValueError("Invalid image data")

        results = model.predict(source=image, save=False, max_det=5)

        faces_detected = False

        for result in results:
            boxes = result.boxes
            for box in boxes:
                x1, y1, x2, y2 = map(int, box.xyxy.tolist()[0])
                cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 1)
                faces_detected = True

        # Re-encode the processed image to base64
        _, buffer = cv2.imencode('.jpg', image)
        processed_image_data = b64encode(buffer).decode("utf-8")
        processed_image = Image(image_data=processed_image_data, faces_detected=faces_detected)
        return processed_image


async def main():
    # Path to your test image
    image_path = Path("test_images/test1.jpg")

    # Load image and convert to base64
    with open(image_path, "rb") as f:
        image_bytes = f.read()
    image_data = base64.b64encode(image_bytes).decode("utf-8")

    # Create ImageProcessor and process the image
    image_processor = ImageProcessor()
    processed_image = await image_processor.process_image(image_data)

    if processed_image:
        print(f"Faces detected: {processed_image.faces_detected}")
        await processed_image.save_to_disk()
        # You can now work with the `processed_image` (save it, display it, etc.)
    else:
        print("Image processing failed.")


if __name__ == "__main__":
    asyncio.run(main())
